name: Odoo Sign Integration (Hardened)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sign-implement-and-deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Harden git auth
        run: |
          set -e
          git config user.name "CI Runner"
          git config user.email "ci@runner"
          git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git

      - name: Ensure dirs
        run: |
          set -e
          mkdir -p energy_broker_uk/models
          mkdir -p energy_broker_uk/data

      - name: Write sign model extension (fields + send + cron sync)
        shell: bash
        run: |
          set -e
          cat > energy_broker_uk/models/sign_contract.py <<'PY'
from odoo import models, fields, api

class CustomerContractSign(models.Model):
    _inherit = 'customer.contract'

    sign_template_id = fields.Many2one('sign.template', string='Signature Template')
    sign_request_id = fields.Many2one('sign.request', string='Signature Request', readonly=True)
    sign_status = fields.Selection([
        ('draft','Draft'),
        ('sent','Sent'),
        ('signed','Signed'),
        ('cancelled','Cancelled'),
    ], default='draft', string='Signature Status', tracking=True)

    def action_send_for_signature(self):
        SignRequest = self.env['sign.request']
        for rec in self:
            tmpl = rec.sign_template_id
            if not tmpl:
                continue
            req = SignRequest.create({
                'template_id': tmpl.id,
                'subject': rec.name or 'Contract Signature',
            })
            rec.sign_request_id = req.id
            rec.sign_status = 'sent'
            return {
                'type': 'ir.actions.act_window',
                'name': 'Signature Request',
                'res_model': 'sign.request',
                'view_mode': 'form',
                'res_id': req.id,
                'target': 'current',
            }

    @api.model
    def _cron_sync_signature_status(self):
        recs = self.search([('sign_request_id','!=',False)])
        for rec in recs:
            req = rec.sign_request_id
            new_status = rec.sign_status or 'draft'
            state = getattr(req, 'state', False) or getattr(req, 'status', False)
            if state in ('completed','signed'):
                new_status = 'signed'
                pdf = getattr(req, 'completed_document', False)
                if pdf:
                    rec.message_post(body='Signed PDF attached via sync',
                                     attachments=[('signed_contract.pdf', pdf)])
            elif state in ('cancel','cancelled'):
                new_status = 'cancelled'
            elif state in ('sent','requested'):
                new_status = 'sent'
            rec.sign_status = new_status
PY

          INIT=energy_broker_uk/models/__init__.py
          [ -f "$INIT" ] || echo "# models init" > "$INIT"
          grep -q "^from \. import sign_contract$" "$INIT" || echo "from . import sign_contract" >> "$INIT"

      - name: Add cron XML and ensure sign dependency in manifest
        shell: bash
        run: |
          set -e
          cat > energy_broker_uk/data/sign_cron.xml <<'XML'
<odoo>
  <data noupdate="1">
    <record id="ir_cron_contract_sign_sync" model="ir.cron">
      <field name="name">Contract Sign Status Sync</field>
      <field name="model_id" ref="model_customer_contract"/>
      <field name="state">code</field>
      <field name="code">model._cron_sync_signature_status()</field>
      <field name="interval_number">1</field>
      <field name="interval_type">days</field>
      <field name="numbercall">-1</field>
      <field name="active">True</field>
    </record>
  </data>
</odoo>
XML

          python3 - <<'PY'
import ast, pathlib
mp = pathlib.Path('energy_broker_uk/__manifest__.py')
man = ast.literal_eval(mp.read_text())
depends = list(man.get('depends', []))
if 'sign' not in depends:
    depends.append('sign')
man['depends'] = depends
data = list(man.get('data', []))
if 'data/sign_cron.xml' not in data:
    data.append('data/sign_cron.xml')
man['data'] = data
mp.write_text(str(man))
PY

      - name: Commit changes (only if modified)
        shell: bash
        run: |
          set -e
          git add energy_broker_uk/models/sign_contract.py energy_broker_uk/models/__init__.py energy_broker_uk/data/sign_cron.xml energy_broker_uk/__manifest__.py
          if ! git diff --cached --quiet; then
            git commit -m "feat(sign): fields, send action, cron sync; add sign dependency"
            git push
          else
            echo "No sign changes to commit"
          fi

      - name: Pull on server
        run: |
          set -e
          git -C /opt/custom-addons/energy_broker_uk pull

      - name: Detect DB name
        id: db
        shell: bash
        run: |
          set -e
          CONF=/etc/odoo19/odoo.conf
          DB=$(awk -F= '/^[[:space:]]*db_name[[:space:]]*=/{gsub(/[[:space:]]+/,"",$2);print $2}' "$CONF" | tr -d '\r')
          [ -n "$DB" ] || (echo "db_name not found"; exit 1)
          echo "db=$DB" >> "$GITHUB_OUTPUT"
          echo "Using DB: $DB"

      - name: Upgrade module (loads XML + Python)
        env:
          DB_NAME: ${{ steps.db.outputs.db }}
        shell: bash
        run: |
          set -e
          sudo systemctl stop odoo19.service || true
          sleep 2
          if [ -x /opt/odoo19/venv/bin/python ]; then PY=/opt/odoo19/venv/bin/python; else PY=python3; fi
          if [ -f /opt/odoo19/odoo/odoo-bin ]; then ODOO_BIN=/opt/odoo19/odoo/odoo-bin; else ODOO_BIN=odoo-bin; fi
          $PY $ODOO_BIN -c /etc/odoo19/odoo.conf -d "$DB_NAME" -u energy_broker_uk --stop-after-init
          sudo systemctl start odoo19.service || systemctl start odoo19.service
          sleep 4
          tail -n 200 /opt/odoo19/log/logfile.txt || true
